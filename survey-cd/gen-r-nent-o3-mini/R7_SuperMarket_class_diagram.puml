@startuml

' Product related classes
class Product {
  - productID: String
  - name: String
  - group: String
  - expirationDate: Date
  - price: double
  - ingredients: String
  + checkExpirationDate(): Boolean
}

' Shelf holds products for sale
class Shelf {
  - products: List<Product>
  + addProduct(p: Product)
  + removeProduct(p: Product)
  + getProducts(): List<Product>
}

' StockRecord represents a form record for a product in inventory
class StockRecord {
  - product: Product
  - quantity: int
  - recordedDate: Date
  + record()
  + verifyStock(actualCount: int): Boolean
}

' PhysicalInventory records all stock forms/purchases
class PhysicalInventory {
  - records: List<StockRecord>
  + recordProduct(p: Product, qty: int)
  + countProducts(): int
  + verifyInventory()
}

' Storage abstraction with different actual storage types
abstract class Storage {
  - products: List<Product>
  + addProduct(p: Product)
  + removeProduct(p: Product)
}

class ColdChamber extends Storage {
}

class Fridge extends Storage {
}

class Freezer extends Storage {
}

' Customers abstracted with two types
abstract class Customer {
  - customerID: String
  - name: String
  - basket: Basket
  + selectProduct(p: Product)
  + checkout()
}

class NormalCustomer extends Customer {
}

class ExtraCustomer extends Customer {
}

' Basket for collecting products when shopping
class Basket {
  - items: List<Product>
  + addProduct(p: Product)
  + removeProduct(p: Product)
  + calculateTotal(): double
}

' Cashier processes transactions and generates invoices
class Cashier {
  - cashierID: String
  - name: String
  + processTransaction(basket: Basket): Invoice
  + calculateTotal(basket: Basket): double
  + generateInvoice(basket: Basket): Invoice
}

' Invoice produced after customer checkout
class Invoice {
  - invoiceID: String
  - items: List<Product>
  - totalAmount: double
  - date: Date
  + printInvoice()
}

' Payment abstract class and its concrete implementations
abstract class Payment {
  - amount: double
  + pay(): Boolean
}

class CashPayment extends Payment {
  - cashReceived: double
  + pay(): Boolean
}

class ChequePayment extends Payment {
  - chequeNumber: String
  - entityName: String
  + pay(): Boolean
}

' Order process for bakery, pastry, or other categories
class Order {
  - orderId: String
  - products: List<Product>
  - quantities: Map<Product, int>
  + prepareOrder()
  + packageOrder()
}

' A controller for verifying orders and stock/shelf status
class OrderController {
  - controllerID: String
  - name: String
  + checkOrder(o: Order): Boolean
}

' General employee class. Cashier and OrderController derive from Employee.
class Employee {
  - employeeID: String
  - name: String
  - role: String
}

' Relationships

' Shelf contains many products
Product "1" -- "*" Shelf : contains

' Physical inventory is managed by a collection of stock records.
PhysicalInventory "1" -- "*" StockRecord : manages
StockRecord "1" -- "1" Product : records

' Storage inheritance structure
ColdChamber --|> Storage
Fridge --|> Storage
Freezer --|> Storage

' Customer association with basket
Customer "1" -- "1" Basket : uses

' Cashier generates invoices for transactions 
Cashier "1" -- "*" Invoice : generates

' Payment inheritance (Cash, Cheque)
Payment <|-- CashPayment
Payment <|-- ChequePayment

' Order is checked by an OrderController
OrderController "1" -- "1" Order : verifies

' Employee specialization
Employee <|-- Cashier
Employee <|-- OrderController

@enduml