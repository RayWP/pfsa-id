@startuml

' Rental Office
class RentalOffice {
  - officeNumber : String
  - officeName : String
  - address : String
  + getOfficeDetails() : String
  + transferVehicle(v: Vehicle, destination: RentalOffice)
}

' Base Vehicle class
class Vehicle {
  - vehicleID : String
  - stateRegistration : String
  - licensePlate : String
  - lastMaintenanceDate : Date
  - registrationExpirationDate : Date
  - homeOffice : RentalOffice
  + scheduleMaintenance(date: Date)
  + updateRegistration(newExpiration: Date)
}

' Truck subclass
class Truck {
  - odometerReading : int
  - gasTankCapacity : float
  - workingRadio : bool
  + updateOdometer(newReading: int)
}
Truck --|> Vehicle

' Trailer subclass
class Trailer {
  - trailerType : String   ' e.g., "8ft Covered" or "6ft Open"
  + getTrailerType() : String
}
Trailer --|> Vehicle

' Abstract RentalCustomer class for Individuals and Companies
abstract class RentalCustomer {
  # customerID : String
}

' Individual Customer, extends RentalCustomer
class IndividualCustomer {
  - name : String
  - homePhone : String
  - address : String
  - driverLicenseState : String
  - driverLicenseNumber : String
  - licenseExpirationDate : Date
  + isLicenseValid() : bool
}
IndividualCustomer --|> RentalCustomer

' Company Customer, extends RentalCustomer
class CompanyCustomer {
  - companyNumber : String
  - companyName : String
  - address : String
  + getCompanyInfo() : String
}
CompanyCustomer --|> RentalCustomer

' Rental Agreement
class RentalAgreement {
  - rentalAgreementNumber : String
  - rentalDate : Date
  - rentalDuration : int    ' in days
  - depositAmount : float
  - dailyRentalRate : float
  - ratePerMile : float
  + calculateEstimatedCost() : float
  + closeAgreement()
}

' Associations

' Each Vehicle has one home RentalOffice.
Vehicle --> "1" RentalOffice : homeOffice

' A RentalOffice can have many home vehicles.
RentalOffice "1" o-- "0..*" Vehicle : bases

' A RentalAgreement is written for one Vehicle.
RentalAgreement --> "1" Vehicle

' A RentalAgreement is associated with exactly one customer (Individual or Company)
RentalAgreement --> "1" RentalCustomer : for

' RentalAgreement originates from one RentalOffice.
RentalAgreement --> "1" RentalOffice : originatingOffice

' RentalAgreement has a drop-off rental office.
RentalAgreement --> "1" RentalOffice : dropOffOffice

@enduml