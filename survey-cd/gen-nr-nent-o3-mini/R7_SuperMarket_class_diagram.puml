@startuml

' Product related classes
class Product {
  - id: int
  - name: string
  - expirationDate: Date
  - ingredients: String
  - group: ProductGroup
}

enum ProductGroup {
  ALIMENTATION
  PASTRY_BAKERY
  BUTCHER
}

' Inventory system classes
class Inventory {
  - forms: InventoryForm[]
  + recordProduct(product: Product, quantity: int)
  + verifyInventory(): Boolean
}

class InventoryForm {
  - product: Product
  - recordedQuantity: int
  - actualQuantity: int
  + checkInventory(): Boolean
}

Inventory "1" *-- "many" InventoryForm : contains

' Shelf where products are displayed
class Shelf {
  - products: Product[]
  + addProduct(product: Product)
}

Shelf "1" *-- "many" Product : holds

' Cold storage processing (for temperature sensitive products)
class ColdStorage {
  + transferToShelf(product: Product)
  + checkExpiration(product: Product): Boolean
}

' Customer and basket
abstract class Customer {
  - id: int
  - name: String
  + chooseProducts(): Basket
}
class NormalCustomer
class ExtraCustomer

Customer <|-- NormalCustomer
Customer <|-- ExtraCustomer

class Basket {
  - items: Product[]
  + addItem(product: Product)
}

Customer "1" --> "1" Basket : uses

' Payment methods
interface PaymentMethod {
  + pay(amount: double)
}

class CashPayment {
  + pay(amount: double)
}
class ChequePayment {
  + pay(amount: double)
  - authorizedEntity: String
}

PaymentMethod <|.. CashPayment
PaymentMethod <|.. ChequePayment

' Sales and checkout (cashier machine)
class Cashier {
  + recordSale(basket: Basket): Sale
}

class Sale {
  - items: Product[]
  - totalAmount: double
  + checkout()
}

class Invoice {
  - sale: Sale
  + printInvoice()
}

Cashier "1" -- "1" Sale : creates
Sale "1" *-- "many" Product : includes
Sale "1" -- "1" Invoice : generates

' Order processing for bakery/pastry orders
class Order {
  - orderItems: Product[]
  + prepare()
}

class BakeryAgent {
  + prepareOrder(order: Order)
}

class ChiefOfOrder {
  + checkOrder(order: Order)
}

BakeryAgent --> Order : processes
ChiefOfOrder --> Order : verifies

' General controller for checking inventory and shelf integrity
class Controller {
  + checkShelf(shelf: Shelf)
  + verifyInventory(inventory: Inventory)
}

' Supplier interface to provide products to the supermarket
class Supplier {
  + supply(product: Product, quantity: int)
}

@enduml