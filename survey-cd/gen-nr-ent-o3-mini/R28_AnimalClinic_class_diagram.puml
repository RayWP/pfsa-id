@startuml

' Define the central Database class aggregating all entities
class Database {
  +animals: Animal[*]
  +owners: Owner[*]
  +physicians: Physician[*]
  +appointments: Appointment[*]
  +conditions: Condition[*]
}

' Define the Animal entity
class Animal {
  +identifier: int
  +name: String
  +breed: String
}

' Admitted is a specialization of Animal (i.e. an admitted animal is an animal)
class Admitted
Animal <|-- Admitted

' Define the Owner entity
class Owner {
  +identifier: int
  +name: String
  +address: String
  +phoneNumber: String
}

' Define an abstract (or base) appoint class to denote scheduling actions.
class Appoint

' Appointment (a.k.a. appointement) extends Appoint.
class Appointment {
  +date: DateTime
}
Appointment --|> Appoint

' Define the Physician entity
class Physician {
  +identifier: int
  +name: String
  +address: String
  +phoneNumber: String
}

' Define the Condition entity
class Condition {
  +commonName: String
  +scientificName: String
}

'------------------------------------------------------------
' Associations between classes

' The Database aggregates the main entities
Database *-- Animal
Database *-- Owner
Database *-- Physician
Database *-- Appointment
Database *-- Condition

' An Owner owns one or more Animals.
Owner "1" -- "0..*" Animal : owns

' Each Animal has exactly one Owner.
Animal "1" --> "1" Owner : belongs to

' An Animal can have many Appointments (for example, for check-ups).
Animal "1" -- "0..*" Appointment : "has appointment for"

' A Physician is responsible for many Appointments.
Physician "1" -- "0..*" Appointment : "handles"

' Each Appointment is for one Animal and one Physician.
Appointment --> Animal : "for animal"
Appointment --> Physician : "with physician"

' Note: The Database stores common Conditions for each breed.
' Although the common conditions are linked to breeds (stored as Animal.breed),
' we model this here by having the Database aggregate Conditions.
' (In a more detailed design, a separate Breed class could associate with Conditions.)

@enduml