@startuml

'========================
' Classes for Reservations
'========================
abstract class Reservation {
  - reservationNumber : int
  - date : Date
  - time : Time
  - numberOfPeople : int
  - guestName : String
  - phoneNumber : String
  + confirmReservation() : void
  + cancelReservation() : void
}

class IndividualReservation {
  - seatingPreference : String " (inside or patio)"
  - smokingPreference : String " (smoking or nonsmoking)"
  + chooseSeating() : void
}
IndividualReservation --|> Reservation

class BanquetReservation {
  - groupName : String
  - methodOfPayment : String
  + arrangeBanquet() : void
}
BanquetReservation --|> Reservation

'========================
' Table Class
'========================
class Table {
  - tableNumber : int
  - description : String "e.g., 'located by the North window'"
  - capacity : int "2, 4 or 6 persons"
  + assignReservation(reservation: Reservation) : void
}

'========================
' Order / ReservationOrder Class
'========================
' This class represents the order of a menu item for a reservation at a given time.
class Order {
  - orderTime : Time
  + addMenuItem(menuItem: MenuItem) : void
  + removeMenuItem(menuItem: MenuItem) : void
}

' Each Reservation can have multiple Orders.
Reservation "1" *-- "0..*" Order : contains
Order --> MenuItem : orders >

'========================
' Menu & MenuItem Classes
'========================
class MenuItem {
  - menuItemNumber : int
  - itemDescription : String
  - itemPrepTime : int "in minutes"
  - type : String "appetizer, entree, dessert or beverage"
  + getPrice(timeOfDay: String) : double
}

'========================
' FoodItem Class
'========================
class FoodItem {
  - foodItemNumber : int
  - name : String "e.g., chicken, mushrooms, etc."
}

' A many-to-many relationship: MenuItem uses many FoodItems and a FoodItem
' can be used in many MenuItems.
MenuItem "0..*" -- "0..*" FoodItem : utilizes

'========================
' Person and Employee Hierarchy
'========================
class Person {
  - name : String
  - dateOfBirth : Date
  - driversLicenseNumber : String
  + updateDetails() : void
}

class Manager {
  + manageStaff() : void
}
Manager --|> Person

class MaitreD {
  + manageWaitStaff() : void
}
MaitreD --|> Person

class Waiter {
  + takeOrder(order: Order) : void
}
Waiter --|> Person

class Bartender {
  + serveDrink() : void
}
Bartender --|> Person

class Chef {
  + prepareDish(menuItem: MenuItem) : void
}
Chef --|> Person

class Cook {
  + cookDish(menuItem: MenuItem) : void
}
Cook --|> Person

class BusPerson {
  + clearTable(table: Table) : void
}
BusPerson --|> Person

class Dishwasher {
  + washDishes() : void
}
Dishwasher --|> Person

'========================
' Organizational Relationships among Staff
'========================
' Several restaurant managers report to Romano.
' A manager manages the Maitre'd and the Chefs.
Manager "1" o-- "0..*" MaitreD : supervises
Manager "1" o-- "0..*" Chef : supervises

' The Maitre'd is responsible for managing Waiters, Bartenders and BusPersons.
MaitreD "1" o-- "0..*" Waiter : manages
MaitreD "1" o-- "0..*" Bartender : manages
MaitreD "1" o-- "0..*" BusPerson : manages

' The Chefs are responsible for managing Cooks and Dishwashers.
Chef "1" o-- "0..*" Cook : manages
Chef "1" o-- "0..*" Dishwasher : manages

'========================
' Waiter to Reservation Association
'========================
' A Waiter can be assigned to many Reservations.
Waiter "1" -- "0..*" Reservation : serves

@startuml_note
Note over Reservation, Waiter : A reservation may be served by one or more waiters\nthroughout the evening.
@enduml_note

@enduml