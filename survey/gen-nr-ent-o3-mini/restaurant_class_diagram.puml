@startuml
' Reservation hierarchy
class Reservation {
  - time: Time
  - date: Date
  - numberOfPeople: int
  - reservationNumber: int
  - name: String
  - phoneNumber: String
}

class IndividualReservation {
  - seatingPreference: String
  - smokingPreference: String
}

class BanquetReservation {
  - groupName: String
  - methodOfPayment: String
}

Reservation <|-- IndividualReservation
Reservation <|-- BanquetReservation

' Table
class Table {
  - tableNumber: int
  - description: String
  - seatingCapacity: int
}

' A reservation is assigned to a specific table
Reservation --> Table : "assigned to (1)"

' Employee hierarchy
class Person {
  - name: String
  - dateOfBirth: Date
  - driversLicenseNumber: String
}

class Manager
class MaîtreD
class Waiter
class Bartender
class Chef
class Cook
class BusPerson
class Dishwasher

Person <|-- Manager
Person <|-- MaîtreD
Person <|-- Waiter
Person <|-- Bartender
Person <|-- Chef
Person <|-- Cook
Person <|-- BusPerson
Person <|-- Dishwasher

' A waiter can be assigned to many reservations
Waiter "1" -- "0..*" Reservation : "serves"

' Menu items and ordering
class MenuItem {
  - menuItemNumber: int
  - itemDescription: String
  - itemPrepTime: int
  - classification: String <<enumeration>> 
}

' To capture dynamic pricing, note that price may depend on time of day.
' (This behavior is modeled in the system logic and is not explicitly detailed here.)

' A reservation can have many menu items ordered (with order time detail).
class Order {
  - orderTime: Time
}
' Link Order as an association class between Reservation and MenuItem
Reservation "1" o-- "0..*" Order : "orders"
Order --> MenuItem : "for"

' Food items utilized in menu items
class FoodItem {
  - foodItemNumber: int
  - description: String
}
' Many-to-many association: A menu item uses many food items and a food item can be used in many menu items.
MenuItem "0..*" -- "0..*" FoodItem : "uses"

@enduml