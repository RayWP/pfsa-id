@startuml
' Define the Party superclass
abstract class Party {
  - name : String
  - policies : List<Policy>
  + Party(name : String)
  + addPolicy(policy : Policy)
  + getPolicies() : List<Policy>
  + name() : String
}

' Person and Company inherit from Party
class Person {
  + Person(name : String)
}
Party <|-- Person

class Company {
  + Company(name : String)
}
Party <|-- Company

' Define the Policy class with its collections and methods
class Policy {
  - emails : List<Email>
  - phones : List<Phone>
  - addresses : List<Address>
  - vehicles : List<Vehicle>
  - physicalObjects : List<PhysicalObject>
  + Policy()
  + addEmail(email : Email)
  + addPhone(phone : Phone)
  + addAddress(address : Address)
  + addVehicle(vehicle : Vehicle)
  + addPhysicalObject(obj : PhysicalObject)
  + getEmails() : List<Email>
  + getPhones() : List<Phone>
  + getAddresses() : List<Address>
  + getVehicles() : List<Vehicle>
  + getPhysicalObjects() : List<PhysicalObject>
}

' Define contact classes with a contactPointAsString() method
class Email {
  + Email(address : String)
  + contactPointAsString() : String
}

class Phone {
  + Phone(number : String)
  + contactPointAsString() : String
}

class Address {
  + Address(location : String)
  + contactPointAsString() : String
}

' Define Vehicle class
class Vehicle {
  - details : String
  + Vehicle(details : String)
  + getDetails() : String
}

' Define abstract PhysicalObject as the base for physical entities
abstract class PhysicalObject {
  - description : String
  - name : String
  + PhysicalObject(name : String, description : String)
  + getName() : String
  + getDescription() : String
}

' Dwelling is a kind of PhysicalObject
class Dwelling {
  + Dwelling(name : String, description : String)
}
Dwelling --|> PhysicalObject

@enduml