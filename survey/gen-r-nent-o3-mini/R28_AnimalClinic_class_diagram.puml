@startuml

' Define classes

class Animal {
  - id: int
  - name: String
  - breed: Breed    ' optional: may be null if no breed is provided
  - owner: Owner
  + getName(): String
  + getBreed(): Breed
  + getOwner(): Owner
  + setName(n: String): void
  + setBreed(b: Breed): void
  + setOwner(o: Owner): void
}

class Owner {
  - id: int
  - name: String
  - address: String
  - phone: String
  + getName(): String
  + getAddress(): String
  + getPhone(): String
  + setName(n: String): void
  + setAddress(a: String): void
  + setPhone(p: String): void
}

class Physician {
  - id: int
  - name: String
  - address: String
  - phone: String
  + getName(): String
  + getAddress(): String
  + getPhone(): String
  + setName(n: String): void
  + setAddress(a: String): void
  + setPhone(p: String): void
}

class Appointment {
  - startDateTime: DateTime
  - animal: Animal
  - physician: Physician
  + getStartDateTime(): DateTime
  + getAnimal(): Animal
  + getPhysician(): Physician
  + schedule(): void
  + cancel(): void
}

class Condition {
  - commonName: String
  - scientificName: String
  + getCommonName(): String
  + getScientificName(): String
  + setCommonName(name: String): void
  + setScientificName(name: String): void
}

class Breed {
  - name: String
  - conditions: List<Condition>
  + getName(): String
  + getConditions(): List<Condition>
  + addCondition(c: Condition): void
  + removeCondition(c: Condition): void
}

' Define relationships and associations

' An Animal is owned by an Owner (composition: an animal cannot exist without an owner)
Animal --> "1" Owner : owner

' Animal optionally has a Breed (aggregation: breed info is not strictly part of the animal)
Animal --> "0..1" Breed : has

' A Breed has many Conditions (aggregation)
Breed "1" o-- "0..*" Condition : commonConditions

' An Appointment is for exactly one Animal
Appointment --> "1" Animal : attendedAnimal

' An Appointment is handled by exactly one Physician
Appointment --> "1" Physician : responsiblePhysician

@enduml