@startuml
' Define Rental Office: each office stocks Vehicles and handles rental transactions
class RentalOffice {
  - officeID : String
  - location : String
  - vehicles : List<Vehicle>
  + rentVehicle(v: Vehicle, c: Customer) : Rented
  + returnVehicle(r: Rented, mileage: int)
  + transferVehicle(v: Vehicle, to: RentalOffice)
}

' Define Central Office: oversees distribution and transfers among Rental Offices
class CentralOffice {
  - offices : List<RentalOffice>
  + directTransfer(v: Vehicle, from: RentalOffice, to: RentalOffice)
}

' Define Vehicle: general attributes common to all vehicles 
class Vehicle {
  - vehicleID : String
  - currentMileage : int
  + updateMileage(newMileage: int)
  + getMileage() : int
}

' Define Truck: a specific type of Vehicle (could add Trailer similarly if needed)
class Truck {
  + getTruckDetails()
}
Vehicle <|-- Truck

' Define Customer: record includes personal info and driver license details
class Customer {
  - customerID : String
  - name : String
  - homePhone : String
  - address : String
  - driverLicenseState : String
  - driverLicenseNumber : String
  - driverLicenseExpiration : Date
  - poorRisk : Boolean
  + checkCreditRisk() : Boolean
}

' Define Rented: represents a rental transaction, logs mileage before and after, dates etc.
class Rented {
  - rentalID : String
  - startMileage : int
  - endMileage : int
  - rentalDate : Date
  - returnDate : Date
  + closeRental(returnMileage: int)
}

' Relationships:
' A RentalOffice stocks many Vehicles.
RentalOffice "1" --> "*" Vehicle : stocks

' A RentalOffice creates many rental transactions.
RentalOffice "1" --> "*" Rented : "creates"

' Each rental transaction links one Customer.
Customer "1" --> "*" Rented : "rents"

' Each rental transaction is associated with one Vehicle.
Rented --> Vehicle : "rented vehicle"

' A Rental transaction is conducted at one RentalOffice.
Rented --> RentalOffice : "from"

' CentralOffice oversees multiple RentalOffices.
CentralOffice "1" --> "*" RentalOffice : "oversees"

@enduml