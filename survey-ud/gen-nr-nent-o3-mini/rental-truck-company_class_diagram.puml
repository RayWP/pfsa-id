@startuml
' Rental Office class
class RentalOffice {
  +officeNumber: String
  +name: String
  +address: String
}

' Abstract Vehicle with common attributes
abstract class Vehicle {
  +vehicleId: String
  +stateOfRegistration: String
  +licensePlateNumber: String
  +lastMaintenanceDate: Date
  +registrationExpirationDate: Date
}

' Truck subclass adds truck‐specific properties
class Truck extends Vehicle {
  +odometerReading: int
  +gasTankCapacity: double
  +workingRadio: boolean
  +truckSize: String
}

' Trailer subclass; using trailerType to distinguish covered vs open trailers
class Trailer extends Vehicle {
  +trailerType: String
  +trailerLength: String
}

' Abstract Renter class to represent an individual or a company renter
abstract class Renter {
  +name: String
  +address: String
}

' Individual Customer subclass with driver's license and contact info
class IndividualCustomer extends Renter {
  +homePhone: String
  +driversLicenseState: String
  +driversLicenseNumber: String
  +driversLicenseExpirationDate: Date
}

' Company subclass with a unique company number
class Company extends Renter {
  +companyNumber: String
}

' Rental Agreement class representing a rental that is for a single vehicle and a single renter
class RentalAgreement {
  +originatingOfficeNumber: String
  +agreementNumber: String
  +rentalDate: Date
  +anticipatedDuration: int
  +depositPaid: double
  +dailyRentalRate: double
  +ratePerMile: double
}

' Associations

' Each RentalOffice is the home office for many Vehicles
RentalOffice "1" -- "0..*" Vehicle : "home office"

' A RentalAgreement is created at an originating RentalOffice and returned to a drop-off RentalOffice
RentalAgreement --> "1" RentalOffice : originatingOffice
RentalAgreement --> "1" RentalOffice : dropOffOffice

' Each RentalAgreement is for one assigned Vehicle
RentalAgreement --> "1" Vehicle : "assigned vehicle"

' Each RentalAgreement involves one renter (either an IndividualCustomer or a Company)
RentalAgreement --> "1" Renter : "rented by"

@enduml